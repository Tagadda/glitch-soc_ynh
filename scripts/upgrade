#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading settings..." --weight=1

admin_mail=$(ynh_user_get_info --username=$admin --key='mail')
config="$install_dir/live/.env.production"

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=${app}-web --action="stop" --log_path=systemd --line_match="Stopped"
ynh_systemd_action --service_name=${app}-sidekiq --action="stop" --log_path=systemd --line_match="Stopped"
ynh_systemd_action --service_name=${app}-streaming --action="stop" --log_path=systemd --line_match="Stopped"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Remove paperclip_secret
ynh_app_setting_delete --app=$app --key=paperclip_secret

# If secret_key_base doesn't exist, retrieve it or create it
if [[ -z "$secret_key_base" ]]; then
	secret_key_base=$(grep -oP "SECRET_KEY_BASE=\K\w+" $config)
	if [[ -z "$secret_key_base" ]]; then
		secret_key_base=$(ynh_string_random --length=128)
	fi
	ynh_app_setting_set --app=$app --key=secret_key_base --value="$secret_key_base"
fi

# If otp_secret doesn't exist, retrieve it or create it
if [[ -z "$otp_secret" ]]; then
	otp_secret=$(grep -oP "OTP_SECRET=\K\w+" $config)
	if [[ -z "$otp_secret" ]]; then
		otp_secret=$(ynh_string_random --length=128)
	fi
	ynh_app_setting_set --app=$app --key=otp_secret --value="$otp_secret"
fi

# If vapid_private_key doesn't exist, retrieve it or create it
if [[ -z "$vapid_private_key" ]]; then
	vapid_private_key=$(grep -oP "VAPID_PRIVATE_KEY=\K.+" $config)
	vapid_public_key=$(grep -oP "VAPID_PUBLIC_KEY=\K.+" $config)
	ynh_app_setting_set "$app" vapid_private_key "$vapid_private_key"
	ynh_app_setting_set "$app" vapid_public_key "$vapid_public_key"
fi

# If redis_namespace doesn't exist, create it
if [[ -z "$redis_namespace" ]]; then
	redis_namespace=${app}_production
	ynh_app_setting_set --app=$app --key=redis_namespace --value=$redis_namespace
fi

if [ -z "$max_toot_chars" ]; then
	max_toot_chars="500"
	ynh_app_setting_set --app=$app --key=max_toot_chars --value=$max_toot_chars
fi

if [ -z "$max_pinned_toots" ]; then
	max_pinned_toots="5"
	ynh_app_setting_set --app=$app --key=max_pinned_toots --value=$max_pinned_toots
fi

if [ -z "$max_bio_chars" ]; then
	max_bio_chars="500"
	ynh_app_setting_set --app=$app --key=max_bio_chars --value=$max_bio_chars
fi

if [ -z "$max_profile_fields" ]; then
	max_profile_fields="4"
	ynh_app_setting_set --app=$app --key=max_profile_fields --value=$max_profile_fields
fi

if [ -z "$max_display_name_chars" ]; then
	max_display_name_chars="30"
	ynh_app_setting_set --app=$app --key=max_display_name_chars --value=$max_display_name_chars
fi

if [ -z "$max_poll_options" ]; then
	max_poll_options="5"
	ynh_app_setting_set --app=$app --key=max_poll_options --value=$max_poll_options
fi

if [ -z "$max_poll_option_chars" ]; then
	max_poll_option_chars="100"
	ynh_app_setting_set --app=$app --key=max_poll_option_chars --value=$max_poll_option_chars
fi

if [ -z "$max_image_size" ]; then
	max_image_size="8388608"
	ynh_app_setting_set --app=$app --key=max_image_size --value=$max_image_size
fi

if [ -z "$max_video_size" ]; then
	max_video_size="41943040"
	ynh_app_setting_set --app=$app --key=max_video_size --value=$max_video_size
fi

if [ -z "$max_emoji_size" ]; then
	max_emoji_size="51200"
	ynh_app_setting_set --app=$app --key=max_emoji_size --value=$max_emoji_size
fi

if [ -z "$max_remote_emoji_size" ]; then
	max_remote_emoji_size="204800"
	ynh_app_setting_set --app=$app --key=max_remote_emoji_size --value=$max_remote_emoji_size
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download Glitch-Soc
	ynh_setup_source --dest_dir="$install_dir/live" --keep="public/system/"

	chmod 750 "$install_dir"
	chmod -R o-rwx "$install_dir"
	chown -R $app:www-data "$install_dir"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading Ruby and NodeJS..." --weight=10

ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$NODEJS_VERSION
ynh_exec_warn_less ynh_install_ruby --ruby_version=$RUBY_VERSION

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ADD SWAP IF NEEDED
#=================================================
ynh_script_progression --message="Adding swap if needed..." --weight=1

total_memory=$(ynh_get_ram --total)
swap_needed=0

if [ $total_memory -lt $MEMORY_NEEDED ]; then
	# Need a minimum of 8Go of memory
	swap_needed=$(($MEMORY_NEEDED - $total_memory))
fi

ynh_script_progression --message="Adding $swap_needed Mo to swap..." --weight=1
ynh_add_swap --size=$swap_needed

#=================================================
# INSTALLING RUBY AND BUNDLER
#=================================================
ynh_script_progression --message="Installing Ruby dependencies..." --weight=5

pushd "$install_dir/live"
	ynh_use_ruby
	ynh_gem update --system --no-document
	ynh_gem install bundler --no-document
popd

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a config file..." --weight=1

language="$(echo $language | head -c 2)"

ynh_add_config --template="../conf/.env.production.sample" --destination="$config"

chmod 400 "$config"
chown $app:$app "$config"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-web" --template="glitchsoc-web.service"
ynh_add_systemd_config --service="$app-sidekiq" --template="glitchsoc-sidekiq.service"
ynh_add_systemd_config --service="$app-streaming" --template="glitchsoc-streaming.service"

#=================================================
# UPGRADE GLITCH-SOC
#=================================================
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading Glitch-Soc..." --weight=10

	pushd "$install_dir/live"
		ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config deployment 'true'
		ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config without 'development test'
		ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle install -j$(getconf _NPROCESSORS_ONLN)
		ynh_use_nodejs
		ynh_exec_as $app $ynh_node_load_PATH yarn install --pure-lockfile
		ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails assets:clean
		ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails assets:precompile
		ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails db:migrate
		ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/tootctl cache clear
	popd
fi

#=================================================
# SETUP THE CRON FILE
#=================================================
ynh_script_progression --message="Setuping the cron file..." --weight=1

ynh_add_config --template="../conf/cron" --destination="/etc/cron.d/$app"

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add "$app-web" --description="$app web service"
yunohost service add "$app-sidekiq" --description="$app sidekiq service"
yunohost service add "$app-streaming" --description="$app streaming service"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=${app}-web --action="start" --log_path=systemd --line_match="Listening on"
ynh_systemd_action --service_name=${app}-sidekiq --action="start" --log_path=systemd --line_match="Schedules Loaded"
ynh_systemd_action --service_name=${app}-streaming --action="start" --log_path=systemd --line_match="Worker 1 now listening"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --weight=1
